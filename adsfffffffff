import QtQuick 2.1
import QtQuick.Window 2.1
import QtQuick.Layouts 1.0
import QtQuick.Controls 1.0
import QtQuick.Dialogs 1.0
import QtMultimedia 5.0
import QtWinExtras 1.0 as Win



Rectangle
{
    id: item
    width: 640
    height: 480
    visible: true
    Connections
    {
        target: receiver
        onPlayState:
        {
            console.log("play music")
        }
    }
    Image {
        id: img
        width: item.width
        height: item.height
        source: "qrc:/imagebackgroud/background.png"
    }
    ColumnLayout
    {
        id: column
        anchors.margins: 9
        anchors.fill: parent

        Label
        {
            id: infoLabel

            elide: Qt.ElideLeft
            verticalAlignment: Qt.AlignCenter
            Layout.minimumHeight: infoLabel.implicitHeight
            Layout.fillWidth: true
            Layout.fillHeight: true

        }
        RowLayout
        {
            id: row

            ToolButton
            {
                id: playPauseButton
                iconSource: "qrc:/imageaudio/media-play-16.png"
                // enable audio

                Layout.preferredWidth: playPauseButton.implicitHeight
                onClicked:
                {

                    audioController.play()
                    Connections
                    {
                        target: receiver
                        onPlayState:
                        {
                            console.log("play music")
                        }
                    }
                }

            }
            ToolButton
            {
                id: stopButton
                Layout.preferredWidth: stopButton.implicitHeight
                iconSource: "qrc:/imageaudio/media-stop-16.png"
                onClicked: audioController.stop()
            }
            ToolButton
            {
                tooltip: qsTr("Rewind")
                iconSource: "qrc:/imageaudio/media-seek-backward-16.png"
                onClicked: audioController.seekBackward()
            }
            ToolButton
            {
                tooltip: qsTr("Forward")
                iconSource: "qrc:/imageaudio/media-seek-forward-16.png"
                onClicked: audioController.seekForward()
            }
            ToolButton
            {
                tooltip: qsTr("previous")
                iconSource: "qrc:/imageaudio/previous-16.png"
                onClicked:
                {
                    audioController.previous()
                }
            }
            ToolButton
            {
                tooltip: qsTr("Next")
                iconSource: "qrc:/imageaudio/next-16.png"
                onClicked:
                {
                    audioController.next()
                }
            }
            Slider
            {
                id: positionSlider
                Layout.minimumWidth: 75
                Layout.fillWidth: true
                maximumValue: audioController.maxVolum()
                property bool sync: flase

                onValueChanged:
                {
                    if (!sync)
                    {
                        audioController.seekVolum();
                    }
                }

                Connections
                {
                    // sysnc Positioner slider music
                }
            }

            Label
            {
                id: positionLabel

//                // Текущее
//                readonly property int minutes: Math.floor(mediaPlayer.position / 60000)
//                readonly property int seconds: Math.round((mediaPlayer.position % 60000) / 1000)

//                // Длительность в минута и секундах
//                readonly property int durationMinutes: Math.floor(mediaPlayer.duration / 60000)
//                readonly property int durationSeconds: Math.round((mediaPlayer.duration % 60000) / 1000)



//                text: {
//                    var formatTime = function(date) {
//                        return Qt.formatTime(date, qsTr("mm:ss"))
//                    }
//                    var currentTime = formatTime(new Date(0, 0, 0, 0, minutes, seconds))
//                    var durationTime = formatTime(new Date(0, 0, 0, 0, durationMinutes, durationSeconds))
//                    return currentTime + "/" + durationTime
//                }
            }
            Slider
            {
                id: volumeSlide
                minimumValue: 0.0
                maximumValue: 1.0
                value: 1.0
                stepSize: 0.01
                implicitWidth: 50

                property bool sync: flase

                onValueChanged:
                {
                    if(!sync)
                    {
                        // do some thing
                    }
                }
            }
        }
        ColumnLayout
        {
            id: playlist

            ScrollView
            {
                Layout.fillWidth: true
                Layout.fillHeight: true
                flickableItem.interactive: true

                ListView
                {
                    id: playlistView
                    anchors.fill: parent
                    model: playlistModel
                    delegate: playlistDelegate
                    highlight: playlistHighLight
                }
            }


            RowLayout
            {
                ToolButton
                {
                    text: qsTr("ADd music file")
                    iconSource: "qrc:/imageaudio/plus-16.png"
                    onClicked: audioController.addFile()
                }
                ToolButton
                {
                    text: "Remove file from playlist"
                    iconSource: "qrc:/imageaudio/minus-16.png"
                    onClicked: audioController.removeFile()
                }

                ToolButton
                {
                    text: qsTr("Clear playlist")
                    iconSource: "qrc:/imageaudio/cross-16.png"
                    onClicked: audioController.clearFile()
                }
            }
        }

    }




}
